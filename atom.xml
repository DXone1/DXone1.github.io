<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dxone1.github.io/</id>
    <title>Gridea</title>
    <updated>2021-11-03T13:27:46.154Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dxone1.github.io/"/>
    <link rel="self" href="https://dxone1.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://dxone1.github.io/images/avatar.png</logo>
    <icon>https://dxone1.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[电商项目 day2：分布式组件构建]]></title>
        <id>https://dxone1.github.io/post/dian-shang-xiang-mu-day3fen-bu-shi-zu-jian-gou-jian/</id>
        <link href="https://dxone1.github.io/post/dian-shang-xiang-mu-day3fen-bu-shi-zu-jian-gou-jian/">
        </link>
        <updated>2021-11-03T08:38:38.000Z</updated>
        <content type="html"><![CDATA[<p>之前已经学习过SpringCloud部分的组件并实际使用过。这次使用springcloud alibaba的组件完成如下功能</p>
<pre><code class="language-txt">nacos: 服务注册、发现和配置中心功能
ribbon, openfeign：服务远程调用和负载均衡
gateway：服务网关
sentinel：限流、降级和熔断保护
sleuth：调用链监控
seata：分布式事务
</code></pre>
<p><img src="https://dxone1.github.io//post-images/1635929017334.png" alt="" loading="lazy"><br>
先统一版本，因为使用的是springboot 2.1.8.RELEASE，故采用SpringCloud Alibaba 2.1.0.RELEASE版本<br>
首先在项目的mall-common中引入依赖</p>
<pre><code class="language-xml">&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;
            &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre>
<p>将其管理起来：<strong>没有引入</strong></p>
<h2 id="1-nacos注册中心">1 Nacos注册中心</h2>
<ol>
<li>所有微服务都需要nacos，所以在mall-common引入nacos的服务发现依赖</li>
</ol>
<pre><code class="language-xml">&lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ol start="2">
<li>在所有需要nacos服务注册的项目中配置，并设置name</li>
</ol>
<pre><code class="language-yaml">spring:
    cloud:
        nacos:
            discovery:
                server-addr: 127.0.0.1:8848
    application: 
        name: mall-coupon
</code></pre>
<ol start="3">
<li>使用<code>@EnableDiscoveryClient</code>注解即可开启发现功能</li>
<li>启动nacos，在windows下测试。本机已经配置好nacos的持久化设置，使用如下命令即可启动</li>
</ol>
<pre><code class="language-shell">D:\backup\document\installer\nacos-server-2.0.3\nacos\bin&gt;startup.cmd -m standalone
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://dxone1.github.io//post-images/1635931291828.png" alt="" loading="lazy"></figure>
<p><strong>一个小细节</strong><br>
在2021版本的idea中不默认开启service工具，在view -&gt; Tool windows中开启。通过小+号打开Run Configuration Type选择Springboot即可<br>
<img src="https://dxone1.github.io//post-images/1635931972133.png" alt="" loading="lazy"></p>
<h2 id="2-openfeign进行远程调用">2 OpenFeign进行远程调用</h2>
<p>第一步仍然是引入依赖，不同的是这个项目使用Spring Initializer生成时使用了feign场景。</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt; &lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ol start="2">
<li>在nall-coupon中添加一个调用controller方法</li>
</ol>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;coupon/coupon&quot;)
public class CouponController {
    @Autowired
    private CouponService couponService;

    @RequestMapping(&quot;/member/list&quot;)
    public R membercoupons() {
        CouponEntity couponEntity = new CouponEntity();
        couponEntity.setCouponName(&quot;满100减10&quot;);
        return R.ok().put(&quot;coupons&quot;, Arrays.asList(couponEntity));
    }
    ......
}
</code></pre>
<ol start="3">
<li>写一个用于远程调用的接口：FeignClient，标注被调用的完整controller和服务名称</li>
</ol>
<pre><code class="language-java">// com.dong.mall.member.feign.CouponFeignService
package com.dong.mall.coupon.feign;

import com.dong.common.utils.R;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.RequestMapping;

@FeignClient(&quot;mall-coupon&quot;)
public interface CouponFeignService {
    @RequestMapping(&quot;/coupon/coupon/member/list&quot;)
    public R membercoupons();
}
</code></pre>
<ol start="4">
<li>在调用发起方主启动类使用@EnableFeignClients(basePackages = &quot;com.dong.mall.member.feign&quot;)开启远程调用功能</li>
<li>在调用发起方mall-member中写一个调用测试方法</li>
</ol>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;member/member&quot;)
public class MemberController {
    @Autowired
    private MemberService memberService;
    // 远程调用接口
    @Autowired
    CouponFeignService couponFeignService;

    @RequestMapping(&quot;/coupons&quot;)
    public R test() {
        MemberEntity memberEntity = new MemberEntity();
        memberEntity.setNickname(&quot;张三&quot;);
        R membercoupons = couponFeignService.membercoupons();
        return R.ok().put(&quot;member&quot;, memberEntity).put(&quot;coupons&quot;, membercoupons.get(&quot;coupons&quot;));
    }
    ......
}
</code></pre>
<p>测试<br>
<img src="https://dxone1.github.io//post-images/1635937631422.png" alt="" loading="lazy"></p>
<h2 id="3-使用nacos做配置中心">3 使用Nacos做配置中心</h2>
<ol>
<li>在mall-common中引入配置中心依赖</li>
</ol>
<pre><code class="language-xml">&lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ol start="2">
<li>在需要管理配置的项目中编写bootstrap.properties文件，该文件会早于application.yml/application.properties生效</li>
</ol>
<pre><code class="language-properties">spring.application.name=mall-coupon
# 配置中心的地址
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
</code></pre>
<ol start="3">
<li>在control上添加一个注解 @RefreshScope</li>
<li>尝试使用nacos的配置中心功能。已经开启了持久化功能。配置文件名为mall-coupon.properties</li>
<li>测试</li>
</ol>
<pre><code class="language-java">@RefreshScope
@RestController
@RequestMapping(&quot;coupon/coupon&quot;)
public class CouponController {
    @Autowired
    private CouponService couponService;

    // 从配置中获取
    @Value(&quot;${coupon.user.name}&quot;)
    private String name;
    @Value(&quot;${coupon.user.age}&quot;)
    private String age;

    @RequestMapping(&quot;/test&quot;)
    public R test() {
        return R.ok().put(&quot;name&quot;, name).put(&quot;age&quot;, age);
    }
    ......
}
</code></pre>
<p><strong>会优先使用配置中心的配置</strong></p>
<h3 id="高级主题分组">高级主题：分组</h3>
<ol>
<li>默认命名空间为public，用于环境配置隔离<br>
开发、测试、生产...<br>
<img src="https://dxone1.github.io//post-images/1635939434661.png" alt="" loading="lazy"><br>
如何切换namespce?</li>
</ol>
<pre><code class="language-properties">spring.cloud.nacos.config.namespace=cb2b23c4-62ab-41e0-a131-70ae4b2c2772
</code></pre>
<p>上面的是对应的命名空间的ID，在nacos图形界面里显示<br>
也可以每个微服务之间互相隔离，建立不同的命名空间<br>
2. 配置集：配置集的集合<br>
3. 配置集id：类似于配置文件名， Data id<br>
4. 配置分组：默认属于DEFAULT_GROUP<br>
<img src="https://dxone1.github.io//post-images/1635939995992.png" alt="" loading="lazy"><br>
使用切换分组</p>
<pre><code class="language-properties">spring.cloud.nacos.config.group=1111
</code></pre>
<p><strong>本项目的约定</strong><br>
每个微服务设置一个命名空间，使用配置分组区分环境 dev, test, prod</p>
<h3 id="高级主题加载多配置集">高级主题：加载多配置集</h3>
<p>例子：</p>
<ol>
<li>将mall-coupons项目的配置拆分并托管给nacos</li>
</ol>
<pre><code class="language-yaml"># datasource.yaml
spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.180.3:3306/mall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
</code></pre>
<p><img src="https://dxone1.github.io//post-images/1635940659201.png" alt="" loading="lazy"><br>
2. 在bootstrap.properties中配置多配置集</p>
<pre><code class="language-properties">spring.application.name=mall-coupon
# 配置中心的地址
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
spring.cloud.nacos.config.namespace=527f3748-b8fe-44bb-8e4f-bf22371a0adc
spring.cloud.nacos.config.group=dev

# 配置集
# id
spring.cloud.nacos.config.ext-config[0].data-id=datasource.yaml
# 分组
spring.cloud.nacos.config.ext-config[0].group=dev
# 是否动态刷新
spring.cloud.nacos.config.ext-config[0].refresh=true

spring.cloud.nacos.config.ext-config[1].data-id=mybatis.yaml
spring.cloud.nacos.config.ext-config[1].group=dev
spring.cloud.nacos.config.ext-config[1].refresh=true

spring.cloud.nacos.config.ext-config[2].data-id=other.yaml
spring.cloud.nacos.config.ext-config[2].group=dev
spring.cloud.nacos.config.ext-config[2].refresh=true
</code></pre>
<h2 id="4-gateway服务网关">4 Gateway服务网关</h2>
<p>作用：鉴权、限流、日志<br>
<img src="https://dxone1.github.io//post-images/1635943097682.png" alt="" loading="lazy"><br>
关键词：路由、断言、过滤器<br>
<img src="https://dxone1.github.io//post-images/1635943846901.png" alt="" loading="lazy"><br>
创建一个项目，作为整体的api网关mall-gateway</p>
<ol>
<li>创建项目，生成时选择Gateway</li>
<li>修改pom文件，统一版本并引入mall-common</li>
<li>开启服务发现 @EnableDiscoveryClient</li>
<li>写application.properties，配置nacos的相关地址，服务发现和注册中心。网关设置为88端口</li>
</ol>
<pre><code class="language-yaml"># bootstrap.yml
spring:
  application:
    name: mall-gateway
  cloud:
    nacos:
      config:
        server-addr: 127.0.0.1:8848
        namespace: 99df8f0b-1740-4545-b75e-108da1f752ff
        group: dev
</code></pre>
<pre><code class="language-properties"># application.properties
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
spring.application.name=mall-gateway
server.port=88
</code></pre>
<p>配置gateway的规则</p>
<pre><code class="language-yaml">spring:
  cloud:
    gateway:
      routes:
        - id: baidu_route
          uri: https://www.baidu.com
          # 断言含有百度
          predicates:
            - Query=url,baidu
        - id: qq_route
          uri: https://www.qq.com
          predicates:
            - Query=url,qq
</code></pre>
<p>如果访问https://localhost:88/hello?url=baidu 会跳到www.baidu.com/hello</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电商项目 day1：使用开源项目快速搭建]]></title>
        <id>https://dxone1.github.io/post/dian-shang-xiang-mu-day1/</id>
        <link href="https://dxone1.github.io/post/dian-shang-xiang-mu-day1/">
        </link>
        <updated>2021-11-02T02:35:33.000Z</updated>
        <content type="html"><![CDATA[<p>为了解决开发的繁重，使用gitee开源的人人开源脚手架工程快速搭建前后分离的项目工程。<br>
renren-fast: https://gitee.com/renrenio/renren-fast<br>
renren-fast-vue：https://gitee.com/renrenio/renren-fast-vue.git<br>
将renren-fast工程clone到本地导入项目，在父pom文件中定义这个模块即可。</p>
<h2 id="1-基于开源脚手架项目快速搭建">1 基于开源脚手架项目快速搭建</h2>
<h3 id="1-后台框架搭建">1 后台框架搭建</h3>
<p>将后端程序加入到项目文档中成为一个子模块。打开其中的建表命令，通过sqlyog连接centos中docker部署的数据库。执行建表指令，搭建起后台管理的后端框架。修改springboot的dev环境配置文件，将项目连接到数据库。项目启动成功如下图<br>
<img src="https://dxone1.github.io//post-images/1635837233452.png" alt="" loading="lazy"><br>
在浏览器中输入http://localhost:8080/renren-fast/ 即可进入raw后端项目，返回如下图（浏览器安装了json解析工具）<br>
<img src="https://dxone1.github.io//post-images/1635837314851.png" alt="" loading="lazy"></p>
<h3 id="2-前端框架搭建">2 前端框架搭建</h3>
<p>接下来进行前端工程。因为之前前端没有深入学习过，这里一边做一边学习。</p>
<ol>
<li>下载node.js环境并安装：版本10.16.3</li>
<li>配置npm使用淘宝镜像 npm config set registry http://registry.npm.taobao.org/</li>
<li>在vs code中打开renren-fast-vue项目，在控制台终端使用npm install命令下载项目需要的各种依赖：NPM 是随同 NodeJS 一起安装的包管理工具</li>
<li>在控制台输入 npm run dev即可开启前端项目。前端地址localhost:8001会将数据打到后端8080地址<br>
前端启动画面<br>
<img src="https://dxone1.github.io//post-images/1635838697500.png" alt="" loading="lazy"><br>
默认登陆账号为 admin admin</li>
</ol>
<h3 id="3-代码生成器">3 代码生成器</h3>
<p>gitee项目 https://gitee.com/renrenio/renren-generator.git<br>
将代码生成器放入后端项目目录中，添加为模块。将配置修改为对应的数据库和项目包。启动在80端口生成代码文档。<br>
将代码文档替换对应的微服务文档即可。注意需要引入许多新的公共依赖。在这里提取出一个公共项目mall-common。所有其他的微服务都依赖于这个模块，在其中的com.dong.common.utils等包中加入需要的类，在公共pom中添加需要的依赖。<br>
因为本项目使用了Mybatis-plus帮助快速开发，所以要按以下步骤进行：</p>
<ol>
<li>在公共项目mall-common中导入mybatis-plus的依赖</li>
<li>在yml文件中配置数据源、mybatis-plus信息等。注意和数据库版本匹配：5.7.36。使用8.0.26版本的数据库驱动即可</li>
<li>配置包扫描，在主启动类上用@Mapper注解指示Mapper接口路径</li>
</ol>
<pre><code class="language-java">@MapperScan(&quot;com.dong.mall.product.dao&quot;)
@SpringBootApplication
public class MallProductApplication {

    public static void main(String[] args) {
        SpringApplication.run(MallProductApplication.class, args);
    }

}
</code></pre>
<pre><code class="language-yaml"># application.yml配置的数据源和mybatis-plus
spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.180.3:3306/mall_pms
    driver-class-name: com.mysql.cj.jdbc.Driver

mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  # 配置自增主键 
  global-config:
    db-config:
      id-type: auto
</code></pre>
<p>注意本项目以后使用的是spring security保证安全，所以不需要renren开源项目中的部分文件，按需添加。最终的mall-common目录如下<br>
<img src="https://dxone1.github.io//post-images/1635921702816.png" alt="" loading="lazy"><br>
在test中使用单元测试，注意匹配jdk版本。同时注意springboot和springcloud版本的匹配。本项目是</p>
<pre><code class="language-yaml">springboot: 2.1.8.RELEASE
springcloud: Greenwich.SR3
</code></pre>
<p>接下来，按照上述步骤逆向生成除mall-product之外其他所有的微服务的代码，并调试。</p>
<h3 id="代码生成器的配置以mall-coupon为例">代码生成器的配置：以mall-coupon为例</h3>
<ol>
<li>首先在generator.properties中设置项目层级目录的相关信息</li>
</ol>
<pre><code class="language-properties">#\u4EE3\u7801\u751F\u6210\u5668\uFF0C\u914D\u7F6E\u4FE1\u606F

mainPath=com.dong
#\u5305\u540D
package=com.dong.mall
moduleName=coupon
#\u4F5C\u8005
author=dong
#Email
email=dongjiyu111@126.com
#\u8868\u524D\u7F00(\u7C7B\u540D\u4E0D\u4F1A\u5305\u542B\u8868\u524D\u7F00)
tablePrefix=sms_

#\u7C7B\u578B\u8F6C\u6362\uFF0C\u914D\u7F6E\u4FE1\u606F
tinyint=Integer
smallint=Integer
mediumint=Integer
int=Integer
integer=Integer
bigint=Long
float=Float
double=Double
decimal=BigDecimal
bit=Boolean

char=String
varchar=String
tinytext=String
text=String
mediumtext=String
longtext=String


date=Date
datetime=Date
timestamp=Date

NUMBER=Integer
INT=Integer
INTEGER=Integer
BINARY_INTEGER=Integer
LONG=String
FLOAT=Float
BINARY_FLOAT=Float
DOUBLE=Double
BINARY_DOUBLE=Double
DECIMAL=BigDecimal
CHAR=String
VARCHAR=String
VARCHAR2=String
NVARCHAR=String
NVARCHAR2=String
CLOB=String
BLOB=String
DATE=Date
DATETIME=Date
TIMESTAMP=Date
TIMESTAMP(6)=Date

int8=Long
int4=Integer
int2=Integer
numeric=BigDecimal

nvarchar=String
</code></pre>
<ol start="2">
<li>在application.yml中配置数据源信息，coupon逆向生成的表存在于mall_sms数据库中</li>
</ol>
<pre><code class="language-yaml">server:
  port: 80

# mysql
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    #MySQL配置
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.180.3:3306/mall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai
    username: root
    password: root
    #oracle配置
    #    driverClassName: oracle.jdbc.OracleDriver
    #    url: jdbc:oracle:thin:@47.100.206.162:1521:xe
    #    username: renren
    #    password: 123456
    #SQLServer配置
    #    driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
    #    url: jdbc:sqlserver://192.168.10.10:1433;DatabaseName=renren_fast
    #    username: sa
    #    password: 123456
    #PostgreSQL配置
  #    driverClassName: org.postgresql.Driver
  #    url: jdbc:postgresql://192.168.10.10:5432/renren_fast
  #    username: postgres
  #    password: 123456



  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  resources:
    static-locations: classpath:/static/,classpath:/views/

#mongodb:
#  host: localhost
#  port: 27017
#  auth: false #是否使用密码验证
#  username: tincery
#  password: renren
#  source: 123456
#  database: test

mybatis-plus:
  mapperLocations: classpath:mapper/**/*.xml


pagehelper:
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql


#指定数据库，可选值有【mysql、oracle、sqlserver、postgresql、mongodb】
renren:
  database: mysql
</code></pre>
<ol start="3">
<li>引入公共依赖</li>
<li>写application.yml文件</li>
</ol>
<pre><code class="language-yaml">spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.180.3:3306/mall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver

mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  # 配置自增主键
  global-config:
    db-config:
      id-type: auto
</code></pre>
<ol start="5">
<li>配置包扫描</li>
</ol>
<pre><code class="language-java">@MapperScan(&quot;com.dong.mall.product.dao&quot;)
@SpringBootApplication
public class MallCouponApplication {

    public static void main(String[] args) {
        SpringApplication.run(MallCouponApplication.class, args);
    }

}
</code></pre>
<ol start="6">
<li>test中junit重新导入包</li>
<li>测试完成<br>
<img src="https://dxone1.github.io//post-images/1635925644636.png" alt="" loading="lazy"></li>
</ol>
<h3 id="项目的端口分配">项目的端口分配</h3>
<pre><code class="language-yaml">mall-coupon: 7000
mall-member: 8000
mall-order: 9000
mall-product: 10000
mall-ware: 11000
</code></pre>
<p>重要的细心的耐心，按照步骤一步步即可完成。通过这个脚手架工程和代码生成器可以快速完成基本的crud搭建，快速进入下一阶段的业务编写和云配置部分。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电商项目 day0：环境配置]]></title>
        <id>https://dxone1.github.io/post/dian-shang-xiang-mu-day0/</id>
        <link href="https://dxone1.github.io/post/dian-shang-xiang-mu-day0/">
        </link>
        <updated>2021-11-01T07:01:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-项目的总体架构">1 项目的总体架构</h2>
<p><img src="https://dxone1.github.io//post-images/1635752087534.jpg" alt="" loading="lazy"><br>
总体上会使用SpringcloudAlibaba和SpringCloud体系的其他组件完成整个微服务体系。</p>
<h2 id="2-linux环境搭建">2 Linux环境搭建</h2>
<h3 id="1-配置静态ip">1 配置静态IP</h3>
<p>这里提一下Vmware + Centos7的静态ip配置</p>
<ol>
<li>首先在Vmware上设置NAT桥接模式，禁用本地DHCP服务。设置一个子网IP，并将网关设置为统一网段中的地址</li>
<li>设置适配器VMware Network Adapter VMnet8的IPV4属性。将IP地址设置在同一个网段中，网关与上面的保持一致。设置首选DNS服务器为114.114.114.114，备用为223.5.5.5阿里云解析</li>
<li>修改配置文件<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></li>
</ol>
<pre><code class="language-vim">TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;static&quot;
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;012d6c4a-d6ac-45e3-ac99-80797072e5f7&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot;
IPADDR=192.168.180.3  #IP地址
GATEWAY=192.168.180.2  #网关
NETMASK=255.255.255.0  
DNS1=&quot;114.114.114.114&quot;
DNS2=&quot;223.5.5.5&quot;
</code></pre>
<h3 id="2-docker环境">2 Docker环境</h3>
<p>之前已经搭建完成Linux + Docker环境，这里下载开发所需的msyql和redis数据库镜像。首先使用<code>dcoker rmi -f $(docker images -qa)</code>删除所有本地已有的镜像，防止冲突。</p>
<h4 id="1-mysql">1 Mysql</h4>
<p>安装版本版本如下</p>
<pre><code class="language-txt">mysql:5.7
</code></pre>
<p>启动docker的mysql环境使用以下命令，这都是docker基础不再赘述。大体意思是后台启动并映射端口为3306 -&gt; 3306。同时添加数据卷用于共享文件，并设定root的密码</p>
<pre><code class="language-dockerfile">docker run -p 3306:3306 --name mysql 
-v /mydata/mysql/log:/var/log/mysql 
-v /mydata/mysql/data:/var/lib/mysql 
-v /mydata/mysql/conf:/etc/mysql 
-e MYSQL_ROOT_PASSWORD=root -d mysql:5.7
</code></pre>
<p>可以通过访问虚拟机的Linux端口映射访问到Container的Mysql服务<br>
<img src="https://dxone1.github.io//post-images/1635755403050.png" alt="" loading="lazy"><br>
验证：在container中建立一个数据库，并在其中测试建一张表，看外部访问是否成功。<br>
<img src="https://dxone1.github.io//post-images/1635756022893.png" alt="" loading="lazy"><br>
<img src="https://dxone1.github.io//post-images/1635756028396.png" alt="" loading="lazy"></p>
<p>接下来修改Mysql的配置文件</p>
<pre><code class="language-conf">[client]
default-character-set=utf8

[mysql]
default-character-set=utf8

[mysqld]
init_connect='SET collation_connection = utf8_unicode_ci'
init_connect='SET NAMES utf8'
character-set-server=utf8
collation-server=utf8_unicode_ci
skip-character-set-client-handshake
skip-name-resolve
</code></pre>
<h4 id="2-redis">2 Redis</h4>
<p>直接pull最新版本的redis，先创建实例</p>
<pre><code class="language-txt">mkdir -p /mydata/redis/conf
touch /mydata/redis/conf/redis.conf
</code></pre>
<p>启动命令如下：</p>
<pre><code class="language-dockerfile">docker run -p 6379:6379 --name redis \
-v /mydata/redis/data:/data \
-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \
-d redis redis-server /etc/redis/redis.conf
</code></pre>
<p>##测试Redis##<br>
<img src="https://dxone1.github.io//post-images/1635757265978.png" alt="" loading="lazy"></p>
<p>注意：新版本的redis会默认持久化，旧版本的则需要修改配置文件<code>/mydata/redis/conf/redis.conf</code></p>
<pre><code class="language-txt">appendonly yes
</code></pre>
<p>启用Redis AOF持久化模式</p>
<h2 id="2-开发环境">2 开发环境</h2>
<p>清单</p>
<pre><code class="language-txt">jdk1.8.0_291
Apache Maven 3.5.2
vsode 大量前端插件
</code></pre>
<p>使用gitee进行项目版本控制。注意现在网络流传的ssh公钥设置往往存在问题，通过查找官网成功配置：https://gitee.com/help/articles/4181#article-header0<br>
<img src="https://dxone1.github.io//post-images/1635765496610.png" alt="" loading="lazy"><br>
在gitee上创建一个仓库：https://gitee.com/dxone/mall.git<br>
在idea中使用git版本控制新建项目，并组织项目结构</p>
<ol>
<li>使用Spring Initializer搭建项目，使用Springboot 2.1.8RELEASE版本，搭建如下项目Module</li>
</ol>
<pre><code class="language-txt">mall-coupon
mall-member
mall-order
mall-product
mall-ware
</code></pre>
<ol start="2">
<li>在项目最外层以pom形式打包，聚合整个mvn工程</li>
</ol>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.dong.mall&lt;/groupId&gt;
    &lt;artifactId&gt;mall&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;mall&lt;/name&gt;
    &lt;description&gt;聚合服务&lt;/description&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;mall-coupon&lt;/module&gt;
        &lt;module&gt;mall-member&lt;/module&gt;
        &lt;module&gt;mall-order&lt;/module&gt;
        &lt;module&gt;mall-product&lt;/module&gt;
        &lt;module&gt;mall-ware&lt;/module&gt;
    &lt;/modules&gt;
&lt;/project&gt;
</code></pre>
<p><img src="https://dxone1.github.io//post-images/1635771275051.png" alt="" loading="lazy"><br>
commit并push到gitee项目仓库<br>
<img src="https://dxone1.github.io//post-images/1635771426712.png" alt="" loading="lazy"></p>
<h2 id="3-数据库设计">3 数据库设计</h2>
<p>根据模块分库分表，sql语句已提供。建库建表后结果如图<br>
<img src="https://dxone1.github.io//post-images/1635773709958.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://dxone1.github.io/post/hello-gridea/</id>
        <link href="https://dxone1.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>