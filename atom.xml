<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dxone1.github.io/</id>
    <title>Gridea</title>
    <updated>2021-11-01T13:39:10.190Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dxone1.github.io/"/>
    <link rel="self" href="https://dxone1.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://dxone1.github.io/images/avatar.png</logo>
    <icon>https://dxone1.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[电商项目 day0：环境配置]]></title>
        <id>https://dxone1.github.io/post/dian-shang-xiang-mu-day0/</id>
        <link href="https://dxone1.github.io/post/dian-shang-xiang-mu-day0/">
        </link>
        <updated>2021-11-01T07:01:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-项目的总体架构">1 项目的总体架构</h2>
<p><img src="https://dxone1.github.io//post-images/1635752087534.jpg" alt="" loading="lazy"><br>
总体上会使用SpringcloudAlibaba和SpringCloud体系的其他组件完成整个微服务体系。</p>
<h2 id="2-linux环境搭建">2 Linux环境搭建</h2>
<h3 id="1-配置静态ip">1 配置静态IP</h3>
<p>这里提一下Vmware + Centos7的静态ip配置</p>
<ol>
<li>首先在Vmware上设置NAT桥接模式，禁用本地DHCP服务。设置一个子网IP，并将网关设置为统一网段中的地址</li>
<li>设置适配器VMware Network Adapter VMnet8的IPV4属性。将IP地址设置在同一个网段中，网关与上面的保持一致。设置首选DNS服务器为114.114.114.114，备用为223.5.5.5阿里云解析</li>
<li>修改配置文件<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></li>
</ol>
<pre><code class="language-vim">TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;static&quot;
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;012d6c4a-d6ac-45e3-ac99-80797072e5f7&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot;
IPADDR=192.168.180.3  #IP地址
GATEWAY=192.168.180.2  #网关
NETMASK=255.255.255.0  
DNS1=&quot;114.114.114.114&quot;
DNS2=&quot;223.5.5.5&quot;
</code></pre>
<h3 id="2-docker环境">2 Docker环境</h3>
<p>之前已经搭建完成Linux + Docker环境，这里下载开发所需的msyql和redis数据库镜像。首先使用<code>dcoker rmi -f $(docker images -qa)</code>删除所有本地已有的镜像，防止冲突。</p>
<h4 id="1-mysql">1 Mysql</h4>
<p>安装版本版本如下</p>
<pre><code class="language-txt">mysql:5.7
</code></pre>
<p>启动docker的mysql环境使用以下命令，这都是docker基础不再赘述。大体意思是后台启动并映射端口为3306 -&gt; 3306。同时添加数据卷用于共享文件，并设定root的密码</p>
<pre><code class="language-dockerfile">docker run -p 3306:3306 --name mysql 
-v /mydata/mysql/log:/var/log/mysql 
-v /mydata/mysql/data:/var/lib/mysql 
-v /mydata/mysql/conf:/etc/mysql 
-e MYSQL_ROOT_PASSWORD=root -d mysql:5.7
</code></pre>
<p>可以通过访问虚拟机的Linux端口映射访问到Container的Mysql服务<br>
<img src="https://dxone1.github.io//post-images/1635755403050.png" alt="" loading="lazy"><br>
验证：在container中建立一个数据库，并在其中测试建一张表，看外部访问是否成功。<br>
<img src="https://dxone1.github.io//post-images/1635756022893.png" alt="" loading="lazy"><br>
<img src="https://dxone1.github.io//post-images/1635756028396.png" alt="" loading="lazy"></p>
<p>接下来修改Mysql的配置文件</p>
<pre><code class="language-conf">[client]
default-character-set=utf8

[mysql]
default-character-set=utf8

[mysqld]
init_connect='SET collation_connection = utf8_unicode_ci'
init_connect='SET NAMES utf8'
character-set-server=utf8
collation-server=utf8_unicode_ci
skip-character-set-client-handshake
skip-name-resolve
</code></pre>
<h4 id="2-redis">2 Redis</h4>
<p>直接pull最新版本的redis，先创建实例</p>
<pre><code class="language-txt">mkdir -p /mydata/redis/conf
touch /mydata/redis/conf/redis.conf
</code></pre>
<p>启动命令如下：</p>
<pre><code class="language-dockerfile">docker run -p 6379:6379 --name redis \
-v /mydata/redis/data:/data \
-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \
-d redis redis-server /etc/redis/redis.conf
</code></pre>
<p>##测试Redis##<br>
<img src="https://dxone1.github.io//post-images/1635757265978.png" alt="" loading="lazy"></p>
<p>注意：新版本的redis会默认持久化，旧版本的则需要修改配置文件<code>/mydata/redis/conf/redis.conf</code></p>
<pre><code class="language-txt">appendonly yes
</code></pre>
<p>启用Redis AOF持久化模式</p>
<h2 id="2-开发环境">2 开发环境</h2>
<p>清单</p>
<pre><code class="language-txt">jdk1.8.0_291
Apache Maven 3.5.2
vsode 大量前端插件
</code></pre>
<p>使用gitee进行项目版本控制。注意现在网络流传的ssh公钥设置往往存在问题，通过查找官网成功配置：https://gitee.com/help/articles/4181#article-header0<br>
<img src="https://dxone1.github.io//post-images/1635765496610.png" alt="" loading="lazy"><br>
在gitee上创建一个仓库：https://gitee.com/dxone/mall.git<br>
在idea中使用git版本控制新建项目，并组织项目结构</p>
<ol>
<li>使用Spring Initializer搭建项目，使用Springboot 2.1.8RELEASE版本，搭建如下项目Module</li>
</ol>
<pre><code class="language-txt">mall-coupon
mall-member
mall-order
mall-product
mall-ware
</code></pre>
<ol start="2">
<li>在项目最外层以pom形式打包，聚合整个mvn工程</li>
</ol>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.dong.mall&lt;/groupId&gt;
    &lt;artifactId&gt;mall&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;mall&lt;/name&gt;
    &lt;description&gt;聚合服务&lt;/description&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;mall-coupon&lt;/module&gt;
        &lt;module&gt;mall-member&lt;/module&gt;
        &lt;module&gt;mall-order&lt;/module&gt;
        &lt;module&gt;mall-product&lt;/module&gt;
        &lt;module&gt;mall-ware&lt;/module&gt;
    &lt;/modules&gt;
&lt;/project&gt;
</code></pre>
<p><img src="https://dxone1.github.io//post-images/1635771275051.png" alt="" loading="lazy"><br>
commit并push到gitee项目仓库<br>
<img src="https://dxone1.github.io//post-images/1635771426712.png" alt="" loading="lazy"></p>
<h2 id="3-数据库设计">3 数据库设计</h2>
<p>根据模块分库分表，sql语句已提供。建库建表后结果如图<br>
<img src="https://dxone1.github.io//post-images/1635773709958.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://dxone1.github.io/post/hello-gridea/</id>
        <link href="https://dxone1.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>