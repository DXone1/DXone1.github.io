<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://dxone1.github.io/</id>
    <title>Gridea</title>
    <updated>2021-11-04T12:15:47.376Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://dxone1.github.io/"/>
    <link rel="self" href="https://dxone1.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://dxone1.github.io/images/avatar.png</logo>
    <icon>https://dxone1.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[电商项目 番外：前端基础]]></title>
        <id>https://dxone1.github.io/post/dian-shang-xiang-mu-day0qian-duan-ji-chu/</id>
        <link href="https://dxone1.github.io/post/dian-shang-xiang-mu-day0qian-duan-ji-chu/">
        </link>
        <updated>2021-11-04T02:41:07.000Z</updated>
        <content type="html"><![CDATA[<p>之前没有什么前端经验，只是简单了解javaScript。本番外篇记录入门级的vue等前端知识学习。</p>
<h2 id="es6">ES6</h2>
<p>ECMAScript 6.0（ 以下简称 ES6， ECMAScript 是一种由 Ecma 国际(前身为欧洲计算机制造商协会,英文名称是 European Computer Manufacturers Association)通过 ECMA-262标准化的脚本程序设计语言） 是 JavaScript 语言的下一代标准。<br>
创建一个项目实操一下！</p>
<h3 id="1-声明变量">1 声明变量</h3>
<ol>
<li>在vscode中新建一个文件夹，新建一个文件：let.htlml</li>
<li>快捷键shift + !快速给html生成模板</li>
<li>测试代码：let声明变量的特性</li>
</ol>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

    &lt;script&gt;
        // var 声明的变量往往会越域
        // let 声明的变量有严格局部作用域
        {
            var a = 1;
            let b = 2;
        } 
        console.log(a); // 1
        console.log(b); // ReferenceError: b is not defined
        // var 可以声明多次
        // let 只能声明一次
        var m = 1
        var m = 2
        let n = 3
        // let n = 4
        console.log(m) // 2
        console.log(n) // Identifier 'n' has already been declared
        // var 会变量提升
        // let 不存在变量提升
        console.log(x); // undefined
        var x = 10;
        console.log(y); //ReferenceError: y is not defined
        let y = 20;
    &lt;/script&gt;
    
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ol start="4">
<li>const声明的变量不能再次赋值</li>
<li>vs code鼠标右键open with live server可以调出浏览器查看</li>
</ol>
<h3 id="2-解构表达式">2 解构表达式</h3>
<ol>
<li>数组的快速赋值</li>
</ol>
<pre><code class="language-html">&lt;script&gt;
        let arr = [1,2,3];

        let [a,b,c] = arr;
        
        console.log(a,b,c);
 &lt;/script&gt;
</code></pre>
<ol start="2">
<li>对象解构<br>
vs code 的快速格式化代码快捷键是Alt + shift + F，不同于idea的ctrl + alt + L</li>
</ol>
<pre><code class="language-js">const person = {
    name: &quot;jack&quot;,
    age: 21,
    language: ['java', 'js', 'css']
}
// const name = person.name;
// const age = person.age;
// const language = person.language;

const {name:abc, age, language} = person;
console.log(abc, age, language);
</code></pre>
<ol start="3">
<li>字符串扩展</li>
</ol>
<pre><code class="language-js">let str = &quot;hello.vue&quot;;
console.log(str.startsWith(&quot;hello&quot;));//true
console.log(str.endsWith(&quot;.vue&quot;));//true
console.log(str.includes(&quot;e&quot;));//true
console.log(str.includes(&quot;hello&quot;));//true
</code></pre>
<ol start="4">
<li>字符串模板：用反引号引起的一长串字符串</li>
</ol>
<pre><code class="language-js">// 字符串模板
let ss = `
            &lt;div&gt;
                &lt;span&gt;hello world&lt;span&gt;
            &lt;/div&gt;
        `
console.log(ss)
</code></pre>
<ol start="5">
<li>插入变量和表达式或方法：通过${}</li>
</ol>
<pre><code class="language-js">// 插值
function fun() {
    return &quot;这是一个函数&quot;;
}

let name = &quot;张三&quot;;
let age = 18;
let info = `我是${name}， 今年${age + 10}了，我想说${fun()}`;
console.log(info)
</code></pre>
<h3 id="3-函数">3 函数</h3>
<ol>
<li>默认参数</li>
</ol>
<pre><code class="language-js">//在 ES6 以前， 我们无法给一个函数参数设置默认值， 只能采用变通写法：
function add(a, b) {
    // 判断 b 是否为空， 为空就给默认值 1
    b = b || 1;
    return a + b;
} 
// 传一个参数
console.log(add(10));

//现在可以这么写： 直接给参数写上默认值， 没传就会自动使用默认值
function add2(a, b = 1) {
    return a + b;
} 
// 传一个参数
console.log(add2(10));
</code></pre>
<ol start="2">
<li>支持不定参数</li>
</ol>
<pre><code class="language-js">// 不定参数
function fun(...values) {
    console.log(values.length)
} 
fun(1, 2) //2
fun(1, 2, 3, 4) //4
</code></pre>
<ol start="3">
<li>箭头函数</li>
</ol>
<pre><code class="language-js">// 箭头函数
//以前声明一个方法
// var print = function (obj) {
// console.log(obj);
// }
// 可以简写为：
var print = obj =&gt; console.log(obj);
// 测试调用
print(&quot;hello&quot;);
</code></pre>
<p>一个比较复杂的场景：和lambda十分相近</p>
<pre><code class="language-js">var sum2 = (a,b) =&gt; {
    c = a + b;
    return a + c;
}
console.log(sum2(2, 4));
</code></pre>
<p>实战</p>
<pre><code class="language-js">//需求， 声明一个对象， hello 方法需要对象的个别属性
//以前的方式：
const person = {
    name: &quot;jack&quot;,
    age: 21,
    language: ['java', 'js', 'css']
} 

function hello(person) {
    console.log(&quot;hello,&quot; + person.name)
} 

// 现在的方式: 箭头函数+对象解构！
var hello2 = ({ name }) =&gt; { console.log(&quot;hello,&quot; + name) };
//测试
hello2(person);
</code></pre>
<h3 id="4-对象">4 对象</h3>
<ol>
<li>keys, values, entries 获取对象属性</li>
</ol>
<pre><code class="language-js">const person = {
    name: &quot;jack&quot;,
    age: 21,
    language: ['java', 'js', 'css']
}
console.log(Object.keys(person));//[&quot;name&quot;, &quot;age&quot;, &quot;language&quot;]
console.log(Object.values(person));//[&quot;jack&quot;, 21, Array(3)]
console.log(Object.entries(person));//[Array(2), Array(2), Array(2)]
</code></pre>
<ol start="2">
<li>assign 复制</li>
</ol>
<pre><code class="language-js">const target = { a: 1 };
const source1 = { b: 2 };
const source2 = { c: 3 };
//Object.assign 方法的第一个参数是目标对象， 后面的参数都是源对象。
Object.assign(target, source1, source2);
console.log(target)//{a: 1, b: 2, c: 3}
</code></pre>
<ol start="3">
<li>简写声明变量</li>
</ol>
<pre><code class="language-js">// 简写声明对象
const age = 23
const name = &quot;张三&quot;
// 传统
const person1 = { age: age, name: name }
console.log(person1)
// ES6： 属性名和属性值变量名一样， 可以省略
const person2 = { age, name }
console.log(person2) //{age: 23, name: &quot;张三&quot;}
</code></pre>
<ol start="4">
<li>对象的函数的简写</li>
</ol>
<pre><code class="language-js">// 对象的函数属性简写
let person = {
    name: &quot;jack&quot;,
    // 以前：
    eat: function (food) {
        console.log(this.name + &quot;在吃&quot; + food);
    },
    // 箭头函数版： 这里拿不到 this
    eat2: food =&gt; console.log(person.name + &quot;在吃&quot; + food),
    // 简写版：
    eat3(food) {
        console.log(this.name + &quot;在吃&quot; + food);
    }
} 
person.eat(&quot;apple&quot;);
person.eat(&quot;banana&quot;);
person.eat(&quot;orange&quot;);
</code></pre>
<ol start="5">
<li>对象扩展运算符<br>
使用...表示取出参数所有可遍历的属性拷贝到当前对象中</li>
</ol>
<pre><code class="language-js">// 1、 拷贝对象（深拷贝）
let p1 = { name: &quot;Amy&quot;, age: 15 }
let someone = { ...p1 }
console.log(someone) //{name: &quot;Amy&quot;, age: 15}

// 2、 合并对象
let age1 = { age: 15 }
let name1 = { name: &quot;Amy&quot; }
let person2 = { ...age1, ...name1 } //如果两个对象的字段名重复， 后面对象字段值会覆盖前面对象的字段值
console.log(person2) //{age: 15, name: &quot;Amy&quot;}
</code></pre>
<h3 id="5-map与reduce">5 map与reduce</h3>
<ol>
<li>map()<br>
和 java8的stream流特性很像，接收一个函数，将数组的每个元素用这个函数处理后返回一个新的结果数组，实例如下</li>
</ol>
<pre><code class="language-js">let arr = ['1','20','-5','3'];
arr = arr.map((item) =&gt; {
    return item * 2;
})
console.log(arr);
</code></pre>
<ol start="2">
<li>
<p>reduce()<br>
为数组中每一个的元素执行回调函数，但是不包括数组中被删除或从未被赋值的元素， 接受四个参数： 初始值（或者上一次回调函数的返回值） ， 前元素值， 当前索引， 调用 reduce 的数组。<br>
callback （执行数组中每个值的函数， 包含四个参数）</p>
<ul>
<li>previousValue （上一次调用回调返回的值， 或者是提供的初始值（initialValue） ）</li>
<li>currentValue （数组中当前被处理的元素）</li>
<li>index （当前元素在数组中的索引）</li>
<li>array （调用 reduce 的数组）</li>
</ul>
<p>initialValue （作为第一次调用 callback 的第一个参数。 ）</p>
</li>
</ol>
<pre><code class="language-js">let arr = ['1','20','-5','3'];
arr = arr.map(item =&gt; item * 2)
console.log(arr);

// 求和
let result = arr.reduce((a, b)=&gt;{
    console.log(&quot;上次处理后的值：&quot; + a);
    console.log(&quot;当前值：&quot; + b);
    return a + b;
});
console.log(result);
</code></pre>
<p>可以设置初始值，设为100：</p>
<pre><code class="language-js">let result = arr.reduce((a, b)=&gt;{
    console.log(&quot;上次处理后的值：&quot; + a);
    console.log(&quot;当前值：&quot; + b);
    return a + b;
},100);
</code></pre>
<h3 id="6-promise-异步操作">6 Promise 异步操作</h3>
<p>如果在一个异步操作的场景中有如下代码</p>
<pre><code class="language-html">&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;

&lt;head&gt;
    &lt;meta charset=&quot;UTF-8&quot;&gt;
    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;script&gt;src = &quot;https://cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;script&gt;
        $.ajax({
            url: &quot;mock/user.json&quot;,
            success(data) {
                console.log(&quot;查询用户： &quot;, data);
                $.ajax({
                    url: `mock/user_course_${data.id}.json`,
                    success(data) {
                        console.log(&quot;查询到课程： &quot;, data);
                        $.ajax({
                            url: `mock/course_score_${data.id}.json`,
                            success(data) {
                                console.log(&quot;查询到分数： &quot;, data);
                            },
                            error(error) {
                                console.log(&quot;出现异常了： &quot; + error);
                            }
                        });
                    },
                    error(error) {
                        console.log(&quot;出现异常了： &quot; + error);
                    }
                });
            },
            error(error) {
                console.log(&quot;出现异常了： &quot; + error);
            }
        })
    &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
<p>在mock文件夹下有如下三个json文件</p>
<pre><code class="language-json">// user.json
{
    &quot;id&quot;: 1,
    &quot;name&quot;: &quot;zhangsan&quot;,
    &quot;password&quot;: &quot;123456&quot;
}

// user_coruse_1.json
{
    &quot;id&quot;: 10,
    &quot;name&quot;: &quot;chinese&quot;
}

// course_score_10.json
{
    &quot;id&quot;: 100,
    &quot;score&quot;: 90
}
</code></pre>
<p>案例： 用户登录， 并展示该用户的各科成绩。 在页面发送两次请求：</p>
<ol>
<li>查询用户， 查询成功说明可以登录</li>
<li>查询用户成功， 查询科目</li>
<li>根据科目的查询结果， 获取去成绩<br>
这样层层嵌套就十分复杂！</li>
</ol>
<h4 id="使用promise的回调1">使用Promise的回调1</h4>
<pre><code class="language-js">let p = new Promise((resolve, reject) =&gt; {
    $.ajax({
        url: &quot;mock/user.json&quot;,
        success: function (data) {
            console.log(&quot;查询用户成功：&quot;, data)
            resolve(data);
        },
        error: function (err) {
            reject(err);
        }
    });
});

p.then((obj) =&gt; {
    return new Promise((resolve, reject) =&gt; {
        $.ajax({
            url: `mock/user_course_${obj.id}.json`,
            success: function (data) {
                console.log(&quot;查询用户课程成功:&quot;, data)
                resolve(data);
            },
            error: function (err) {
                reject(err);
            }
        });
    });
}).then((data) =&gt; {
    $.ajax({
        url: `mock/course_score_${data.id}.json`,
        success: function (data) {
            console.log(&quot;查询课程得分成功:&quot;, data)
        },
        error: function (err) {
        }
    });
})
</code></pre>
<h4 id="使用promise的回调2">使用Promise的回调2</h4>
<pre><code class="language-js">function get(url, data) {
    return new Promise((resolve, reject) =&gt; {
        $.ajax({
            url: url,
            data: data,
            success: function (data) {
                resolve(data);
            },
            error: function (err) {
                reject(err);
            }
        })
    });
}

get(&quot;mock/user.json&quot;)
    .then((data) =&gt; {
        console.log(&quot;用户查询成功: &quot;, data);
        return get(`mock/user_course_${data.id}.json`);
    })
    .then((data) =&gt; {
        console.log(&quot;课程查询成功: &quot;, data);
        return get(`mock/course_score_${data.id}.json`);
    })
    .then((data) =&gt; {
        console.log(&quot;成绩查询成功: &quot;, data);
    })
    .catch((err) =&gt; {
        console.log(&quot;出现异常: &quot;, err)
    });
</code></pre>
<h3 id="7-模块化">7 模块化</h3>
<p>模块化就是把代码进行拆分， 方便重复利用。 类似 java 中的导包： 要使用一个包， 必须先导包。 而 JS 中没有包的概念， 换来的是<strong>模块</strong>。使用import和export命令</p>
<pre><code class="language-js">var name = &quot;jack&quot;
var age = 21
function add(a, b) {
    return a + b;
}
export {name,age,add}
/***********************/
import abc from &quot;./hello.js&quot;
import {name, age, add} from &quot;./user&quot;

abc.sum(1, 2);
console.log(name);
add(1,3);
</code></pre>
<h2 id="vue">Vue</h2>
<h3 id="mvvm思想">MVVM思想</h3>
<ul>
<li>M： 即 Model， 模型， 包括数据和一些基本操作</li>
<li>V： 即 View， 视图， 页面渲染结果</li>
<li>VM： 即 View-Model， 模型与视图间的双向操作（无需开发人员干涉）<br>
<img src="https://dxone1.github.io//post-images/1636009915747.png" alt="" loading="lazy"></li>
</ul>
<h3 id="相关信息">相关信息</h3>
<p>官网： https://cn.vuejs.org/<br>
参考： https://cn.vuejs.org/v2/guide/<br>
Git 地址： https://github.com/vuejs</p>
<h3 id="学习">学习</h3>
<p>在vscode中使用npm管理工具导入Vue</p>
<ol>
<li><code>npm init -y</code> 初始化项目、</li>
<li><code>npm install vue</code>安装vue</li>
<li>html中使用</li>
</ol>
<pre><code class="language-html">&lt;script src=&quot;./node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>引入vue.js<br>
<strong>测试样例：</strong></p>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;!-- {{}}是Vue提供的插值占位符 --&gt;
    &lt;h1&gt; {{name}},非常帅&lt;/h1&gt;
&lt;/div&gt;

&lt;script src=&quot;./node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
    let vm = new Vue({
        // el接管div,通过id选择
        el: &quot;#app&quot;,
        // data可能有许多数据
        data: {
            name: &quot;张三&quot;,
        }
    });
&lt;/script&gt;
</code></pre>
<p>在浏览器控制台可以更改name属性，实时更新<br>
效果：<br>
<img src="https://dxone1.github.io//post-images/1636010691042.png" alt="" loading="lazy"></p>
<h3 id="vue基本语法与插件">Vue基本语法与插件</h3>
<ol>
<li>双向绑定<br>
模型变化会导致视图的变化，视图变化也会引起模型变化</li>
</ol>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;!-- {{}}是Vue提供的插值占位符, 实现双向绑定 --&gt;
    &lt;input type=&quot;text&quot; v-model=&quot;num&quot;&gt;
    &lt;!-- 点赞实时增加 --&gt;
    &lt;button v-on:click=&quot;num++&quot;&gt;点赞&lt;/button&gt;
    &lt;button v-on:click=&quot;cancle&quot;&gt;取消点赞&lt;/button&gt;
    &lt;h1&gt; {{name}},非常帅，有{{num}}个人为他点赞&lt;/h1&gt;
&lt;/div&gt;

&lt;script src=&quot;./node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
    let vm = new Vue({
        // el绑定元素
        el: &quot;#app&quot;,
        // data封装数据
        data: {
            name: &quot;张三&quot;,
            num: 1
        },
        // method封装函数
        methods: {
            cancle() {
                this.num--;
            }
        }
    });
&lt;/script&gt;
</code></pre>
<p><img src="https://dxone1.github.io//post-images/1636011475076.png" alt="" loading="lazy"><br>
v-xx：指令，可以简单的进行dom的操作！<br>
插件安装Vetur和Vue 2 Snippets，方便Vue的语法提示等功能</p>
<h3 id="指令">指令</h3>
<ol>
<li>{{}}插值表达式</li>
</ol>
<ul>
<li>该表达式支持 JS 语法， 可以调用 js 内置函数（必须有返回值</li>
<li>表达式必须有返回结果。 例如 1 + 1， 没有结果的表达式不允许使用， 如： let a = 1 + 1;</li>
<li>可以直接获取 Vue 实例中定义的数据或函数</li>
</ul>
<ol start="2">
<li>v-html和v-text</li>
</ol>
<ul>
<li>v-text： 将数据输出到元素内部， 如果输出的数据有 HTML 代码， 会作为普通文本输出</li>
<li>v-html： 将数据输出到元素内部， 如果输出的数据有 HTML 代码， 会被渲染</li>
</ul>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    {{msg}} &lt;br/&gt;
    &lt;!-- 使用v-html和v-txt不会出现插值闪烁的现象 --&gt;
    &lt;!-- 以html形式展现，可以显示出H1样式 --&gt;
    &lt;span v-html=&quot;msg&quot;&gt;&lt;/span&gt;&lt;br/&gt;
    &lt;!-- 展示原先的样式，不会显示大标题 --&gt;
    &lt;span v-text=&quot;msg&quot;&gt;&lt;/span&gt;&lt;br/&gt;    
&lt;/div&gt;
</code></pre>
<ol start="3">
<li>v-bind<br>
html 属性不能使用双大括号形式绑定， 我们使用 v-bind 指令给 HTML 标签属性绑定值；而且在将 <code>v-bind</code> 用于 <code>class</code> 和 <code>style</code> 时， Vue.js 做了专门的增强</li>
</ol>
<pre><code class="language-html">&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;div id=&quot;app&quot;&gt;
    &lt;a v-bind:href=&quot;link&quot;&gt;gogogo&lt;/a&gt;
    &lt;!-- 只有对应的属性为true才添加class --&gt;
    &lt;!-- style动态绑定 --&gt;
    &lt;span v-bind:class=&quot;{active:isActive,'text-danger':hasError}&quot; 
        v-bind:style=&quot;{color: color1, 'fontSize': size}&quot;&gt;你好&lt;/span&gt;
&lt;/div&gt;

&lt;script&gt;
    let vm = new Vue({
        el: &quot;#app&quot;,
        data: {
            link: &quot;https://www.baidu.com&quot;,
            isActive: true,
            hasError: true,
            color1: 'red',
            size: '36px'
        }
    });
&lt;/script&gt;
</code></pre>
<p><strong>以上均为单向绑定。</strong><br>
4. v-model 双向绑定</p>
<pre><code class="language-html">&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt; 
&lt;!-- 一般用于表单项 --&gt;
&lt;div id=&quot;app&quot;&gt;
    精通的语言:
        &lt;!-- 通过v-model双向绑定到Vue中 --&gt;
        &lt;input type=&quot;checkbox&quot; v-model=&quot;language&quot; value=&quot;Java&quot;&gt;Java&lt;br/&gt;
        &lt;input type=&quot;checkbox&quot; v-model=&quot;language&quot; value=&quot;PHP&quot;&gt;PHP&lt;br/&gt;
        &lt;input type=&quot;checkbox&quot; v-model=&quot;language&quot; value=&quot;Python&quot;&gt;Python&lt;br/&gt;
    选中了 {{language.join(&quot;,&quot;)}}
&lt;/div&gt;

&lt;script&gt;
    let vm = new Vue({
        el: &quot;#app&quot;,
        data: {
            language: []
        }
    })
&lt;/script&gt;
</code></pre>
<ol start="5">
<li>v-on配合修饰符实现功能</li>
</ol>
<ul>
<li>事件修饰符
<ul>
<li><code>.stop</code> ： 阻止事件冒泡到父元素</li>
<li><code>.prevent</code>： 阻止默认事件发生</li>
<li><code>.capture</code>： 使用事件捕获模式</li>
<li><code>.self</code>： 只有元素自身触发事件才执行。 （冒泡或捕获的都不执行）</li>
<li><code>.once</code>： 只执行一次</li>
</ul>
</li>
<li>按键修饰符
<ul>
<li><code>.enter</code></li>
<li><code>.tab</code></li>
<li><code>.delete</code> (捕获“删除”和“退格”键)</li>
<li><code>.esc</code></li>
<li><code>.space</code></li>
<li><code>.up</code></li>
<li><code>.down</code></li>
<li><code>.left</code></li>
<li><code>.right</code></li>
</ul>
</li>
<li>组合按钮
<ul>
<li><code>.ctrl</code></li>
<li><code>.alt</code></li>
<li><code>.shift</code></li>
</ul>
</li>
</ul>
<pre><code class="language-html">&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;

&lt;div id=&quot;app&quot;&gt;
   &lt;button v-on:click=&quot;num++&quot;&gt;点赞&lt;/button&gt;
   &lt;button @click=&quot;cancel&quot;&gt;取消&lt;/button&gt;
   &lt;h1&gt;有{{num}}个赞&lt;/h1&gt;
   &lt;!-- 阻止事件冒泡 --&gt;
   &lt;div style=&quot;border: 1px solid red;padding: 20px;&quot; @click.once=&quot;hello&quot;&gt;
       &lt;div style=&quot;border: 1px solid blue;padding: 20px;&quot; @click.stop=&quot;hello&quot;&gt;
           &lt;a href=&quot;https://www.baidu.com&quot; @click.prevent.stop=&quot;hello&quot;&gt;去百度&lt;/a&gt;
       &lt;/div&gt;
   &lt;/div&gt;

   &lt;!-- 按键修饰符 --&gt;
   &lt;!-- 上键加2，下键减2，单击鼠标+ctrl变成10 --&gt;
   &lt;input type=&quot;text&quot; v-model=&quot;num&quot; v-on:keyup.up=&quot;num+=2&quot; @keyup.down=&quot;num-=2&quot;
           @click.ctrl=&quot;num=10&quot;&gt;&lt;br/&gt;        
&lt;/div&gt;

&lt;script&gt;
   let vm = new Vue({
       el: &quot;#app&quot;,
       data: {
           num: 0
       },
       methods: {
           cancel() {
               this.num--;
           },
           hello() {
               alert(&quot;点击了&quot;)
           }
       }
   })
&lt;/script&gt;
</code></pre>
<ol start="6">
<li>v-for 遍历显示<br>
三种语法：</li>
</ol>
<ul>
<li><code>v-for=&quot;item in items&quot;</code></li>
<li><code>v-for=&quot;(item,index) in items&quot;</code></li>
<li>(v,k)
<ul>
<li><code>v-for=&quot;value in object&quot;</code></li>
<li><code>v-for=&quot;(value,key) in object&quot;</code></li>
<li><code>v-for=&quot;(value,key,index) in object&quot;</code></li>
</ul>
</li>
</ul>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;ul&gt;
        &lt;!-- v-for 元素遍历 --&gt;
        &lt;li v-for=&quot;user in users&quot;&gt;
            {{user.name}} - {{user.gender}} - {{user.age}}
        &lt;/li&gt;
        &lt;!-- v-for 序号遍历 --&gt;
        &lt;li v-for=&quot;(user, index) in users&quot;&gt;
            {{index + 1}} - {{user.name}} - {{user.gender}} - {{user.age}}&lt;br&gt;

            对象信息:
            &lt;span v-for=&quot;(v,k,i) in user&quot;&gt;
                {{k}} == {{v}} == {{i}}&lt;br&gt;
            &lt;/span&gt;
        &lt;/li&gt;          
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    let app = new Vue({
        el: &quot;#app&quot;,
        data: {
            users: [
                { name: '柳岩', gender: '女', age: 21 },
                { name: '张三', gender: '男', age: 18 },
                { name: '范冰冰', gender: '女', age: 24 },
                { name: '刘亦菲', gender: '女', age: 18 },
                { name: '古力娜扎', gender: '女', age: 25 }
            ]
        },
    })
&lt;/script&gt;
</code></pre>
<p>使用<code>:key</code>唯一标识</p>
<pre><code class="language-html">&lt;ul&gt;
    &lt;li v-for=&quot;(item,index) in items&quot; :key=”index”&gt;&lt;/li&gt;
&lt;/ul&gt;
</code></pre>
<ol start="7">
<li>v-if 和 v-show<br>
v-if，顾名思义，条件判断。当得到结果为 true 时，所在的元素才会被渲染。<br>
v-show，当得到结果为 true 时，所在的元素才会被显示。使用display:none隐藏<br>
语法： <code>v-if=&quot;布尔表达式&quot;</code>, <code>v-show=&quot;布尔表达式&quot;</code>,</li>
</ol>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;button v-on:click=&quot;show = !show&quot;&gt;点我呀&lt;/button&gt;
    &lt;br&gt;
    &lt;h1 v-if=&quot;show&quot;&gt;
        看到我啦？ ！
    &lt;/h1&gt;
    &lt;h1 v-show=&quot;show&quot;&gt;
        看到我啦？ ！ show
    &lt;/h1&gt;
&lt;/div&gt;
&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    let app = new Vue({
        el: &quot;#app&quot;,
        data: {
            show: true
        }
    })
&lt;/script&gt;
</code></pre>
<ol start="8">
<li>v-else和v-else-if</li>
</ol>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;button v-on:click=&quot;random=Math.random()&quot;&gt;点我呀
    &lt;/button&gt;&lt;span&gt;{{random}}&lt;/span&gt;
    &lt;h1 v-if=&quot;random &gt;= 0.75&quot;&gt;
        看到我啦？ ！ v-if &gt;= 0.75
    &lt;/h1&gt;
    &lt;h1 v-else-if=&quot;random &gt; 0.5&quot;&gt;
        看到我啦？ ！ v-else-if &gt; 0.5
    &lt;/h1&gt;
    &lt;h1 v-else-if=&quot;random &gt; 0.25&quot;&gt;
        看到我啦？ ！ v-else-if &gt; 0.25
    &lt;/h1&gt;
    &lt;h1 v-else&gt;
        看到我啦？ ！ v-else
    &lt;/h1&gt;
&lt;/div&gt;
&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    let app = new Vue({
        el: &quot;#app&quot;,
        data: {
            random: 1
        }
    })
&lt;/script&gt;
</code></pre>
<h3 id="计算属性和侦听器">计算属性和侦听器</h3>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;ul&gt;
        &lt;li&gt;西游记： 价格{{xyjPrice}}， 数量：
            &lt;input type=&quot;number&quot; v-model=&quot;xyjNum&quot;&gt;
        &lt;/li&gt;
        &lt;li&gt;水浒传： 价格{{shzPrice}}， 数量：
            &lt;input type=&quot;number&quot; v-model=&quot;shzNum&quot;&gt;
        &lt;/li&gt;
        &lt;li&gt;总价： {{totalPrice}}&lt;/li&gt;
        {{msg}}
    &lt;/ul&gt;
&lt;/div&gt;
&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;script type=&quot;text/javascript&quot;&gt;
    let app = new Vue({
        el: &quot;#app&quot;,
        data: {
            xyjPrice: 56.73,
            shzPrice: 47.98,
            xyjNum: 1,
            shzNum: 1,
            msg: &quot;&quot;
        },
        // 计算属性
        computed: {
            totalPrice() {
                return this.xyjPrice * this.xyjNum + this.shzPrice * this.shzNum;
            }
        },
        // 监听器
        watch: {
            xyjNum: function(newVal, oldVal) {
                if(newVal &gt;= 3) {
                    this.msg = &quot;库存超出限制&quot;;
                    this.xyjNum = 3;
                } else {
                    this.msg = &quot;&quot;;
                }
            }
        }
    })
&lt;/script&gt;
</code></pre>
<h3 id="过滤器">过滤器</h3>
<p>过滤器不改变真正的<code>data</code>， 而只是改变渲染的结果， 并返回过滤后的版本。 在很多不同的情况下， 过滤器都是有用的， 比如尽可能保持 API 响应的干净， 并在前端处理数据的格式。</p>
<ol>
<li>局部过滤</li>
</ol>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;table&gt;
        &lt;tr v-for=&quot;user in userList&quot;&gt;
            &lt;td&gt;{{user.id}}&lt;/td&gt;
            &lt;td&gt;{{user.name}}&lt;/td&gt;
            &lt;!-- 使用代码块实现， 有代码侵入 --&gt;
            &lt;!-- &lt;td&gt;{{user.gender===1? &quot;男&quot;:&quot;女&quot;}}&lt;/td&gt; --&gt;
            &lt;!-- 使用过滤器 --&gt;
            &lt;td&gt;{{user.gender | genderFilter}}&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;

&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    let app = new Vue({
        el: &quot;#app&quot;,
        data: {
            userList: [
                { id: 1, name: 'jacky', gender: 1 },
                { id: 2, name: 'peter', gender: 0 }
            ]
        },
        // 过滤器
        filters: {
            genderFilter(val) {
                if(val == 1) {
                    return &quot;男&quot;;
                } else {
                    return &quot;女&quot;;
                }
            }
        } 
    });
&lt;/script&gt;
</code></pre>
<ol start="2">
<li>全局过滤器</li>
</ol>
<pre><code class="language-html">&lt;script&gt;
    Vue.filter(&quot;gFilter&quot;, function (val) {
        if (val == 1) {
            return &quot;男!&quot;;
        } else {
            return &quot;女!&quot;;
        }
    })
&lt;/script&gt;
</code></pre>
<h3 id="vue组件化">Vue组件化</h3>
<p>在大型应用开发的时候， 页面可以划分成很多部分。 往往不同的页面， 也会有相同的部分。例如可能会有相同的头部导航。但是如果每个页面都独自开发， 这无疑增加了我们开发的成本。 所以我们会把页面的不同部分拆分成独立的组件， 然后在不同页面就可以共享这些组件， 避免重复开发。在 vue 里， 所有的 vue 实例都是组件</p>
<ul>
<li>组件其实也是一个 Vue 实例， 因此它在定义时也会接收： data、 methods、 生命周期函数等</li>
<li>不同的是组件不会与页面的元素绑定， 否则就无法复用了， 因此没有el 属性。</li>
<li>但是组件渲染需要 html 模板， 所以增加了 template 属性， 值就是 HTML 模板</li>
<li>全局组件定义完毕， 任何 vue 实例都可以直接在 HTML 中通过组件名称来使用组件了</li>
<li>data 必须是一个函数， 不再是一个对象。否则返回的都是一个对象</li>
</ul>
<pre><code class="language-html">&lt;div id=&quot;app&quot;&gt;
    &lt;button @click=&quot;count++&quot;&gt;我被点击了{{count}}次&lt;/button&gt;
    &lt;!-- 使用全局组件，都是独立的副本！ --&gt;
    &lt;counter&gt;&lt;/counter&gt;
    &lt;counter&gt;&lt;/counter&gt;
    &lt;counter&gt;&lt;/counter&gt;
    &lt;!-- 使用局部组件 --&gt;
    &lt;button-counter&gt;&lt;/button-counter&gt;
    &lt;button-counter&gt;&lt;/button-counter&gt;
    &lt;button-counter&gt;&lt;/button-counter&gt;
&lt;/div&gt;
&lt;script src=&quot;../node_modules/vue/dist/vue.js&quot;&gt;&lt;/script&gt;

&lt;script&gt;
    // 全局组件
    Vue.component(&quot;counter&quot;, {
        template: `&lt;button @click=&quot;count++&quot;&gt;我被点击了{{count}}次&lt;/button&gt;`,
        // 返回的是一个新的对象，所以以此为模板创建的都是独立的副本
        data() {
            return {
                count: 1
            }
        }
    });

    // 局部定义一个组件
    const buttonCounter = {
        template: `&lt;button @click=&quot;count++&quot;&gt;我被点击了{{count}}次&lt;/button&gt;`,
        // 返回的是一个新的对象，所以以此为模板创建的都是独立的副本
        data() {
            return {
                count: 1
            }
        }
    };

    let vm = new Vue({
        el: &quot;#app&quot;,
        data: {
            count: 1
        },
        // 声明局部一个组件
        components: {
            &quot;button-counter&quot;: buttonCounter
        }
    })
&lt;/script&gt;
</code></pre>
<h3 id="生命周期和钩子函数">生命周期和钩子函数</h3>
<p>每个 Vue 实例在被创建时都要经过一系列的初始化过程 ： 创建实例， 装载模板， 渲染模板等等。 Vue 为生命周期中的每个状态都设置了钩子函数（监听函数） 。 每当 Vue 实例处于不同的生命周期时， 对应的函数就会被触发调用。<br>
<img src="https://dxone1.github.io//post-images/1636020701181.png" alt="" loading="lazy"></p>
<h3 id="vue的模块化开发">Vue的模块化开发</h3>
<p>1、 npm install webpack -g<br>
全局安装 webpack<br>
2、 npm install -g @vue/cli-init<br>
全局安装 vue 脚手架<br>
3、 初始化 vue 项目；<br>
vue init webpack appname： vue 脚手架使用 webpack 模板初始化一个 appname 项目<br>
4、 启动 vue 项目；<br>
项目的 package.json 中有 scripts， 代表我们能运行的命令<br>
- npm start = npm run dev： 启动项目<br>
- npm run build： 将项目打包</p>
<h3 id="vue整合elementui">Vue整合ElementUI</h3>
<p>1、 安装 element-ui: npm i element-ui<br>
2、 在 main.js 中引入 element-ui 就可以全局使用了。</p>
<pre><code class="language-js">import ElementUI from 'element-ui'
import 'element-ui/lib/theme-chalk/index.css'
Vue.use(ElementUI)
</code></pre>
<p>3、 将 App.vue 改为 element-ui 中的后台布局<br>
4、 添加测试路由、 组件， 测试跳转逻辑<br>
(1) 、 参照文档 el-menu 添加 router 属性<br>
(2) 、 参照文档 el-menu-item 指定 index 需要跳转的地址</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电商项目 day2：分布式组件构建]]></title>
        <id>https://dxone1.github.io/post/dian-shang-xiang-mu-day3fen-bu-shi-zu-jian-gou-jian/</id>
        <link href="https://dxone1.github.io/post/dian-shang-xiang-mu-day3fen-bu-shi-zu-jian-gou-jian/">
        </link>
        <updated>2021-11-03T08:38:38.000Z</updated>
        <content type="html"><![CDATA[<p>之前已经学习过SpringCloud部分的组件并实际使用过。这次使用springcloud alibaba的组件完成如下功能</p>
<pre><code class="language-txt">nacos: 服务注册、发现和配置中心功能
ribbon, openfeign：服务远程调用和负载均衡
gateway：服务网关
sentinel：限流、降级和熔断保护
sleuth：调用链监控
seata：分布式事务
</code></pre>
<p><img src="https://dxone1.github.io//post-images/1635929017334.png" alt="" loading="lazy"><br>
先统一版本，因为使用的是springboot 2.1.8.RELEASE，故采用SpringCloud Alibaba 2.1.0.RELEASE版本<br>
首先在项目的mall-common中引入依赖</p>
<pre><code class="language-xml">&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;
            &lt;version&gt;2.1.0.RELEASE&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;
&lt;/dependencyManagement&gt;
</code></pre>
<p>将其管理起来：<strong>没有引入</strong></p>
<h2 id="1-nacos注册中心">1 Nacos注册中心</h2>
<ol>
<li>所有微服务都需要nacos，所以在mall-common引入nacos的服务发现依赖</li>
</ol>
<pre><code class="language-xml">&lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ol start="2">
<li>在所有需要nacos服务注册的项目中配置，并设置name</li>
</ol>
<pre><code class="language-yaml">spring:
    cloud:
        nacos:
            discovery:
                server-addr: 127.0.0.1:8848
    application: 
        name: mall-coupon
</code></pre>
<ol start="3">
<li>使用<code>@EnableDiscoveryClient</code>注解即可开启发现功能</li>
<li>启动nacos，在windows下测试。本机已经配置好nacos的持久化设置，使用如下命令即可启动</li>
</ol>
<pre><code class="language-shell">D:\backup\document\installer\nacos-server-2.0.3\nacos\bin&gt;startup.cmd -m standalone
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://dxone1.github.io//post-images/1635931291828.png" alt="" loading="lazy"></figure>
<p><strong>一个小细节</strong><br>
在2021版本的idea中不默认开启service工具，在view -&gt; Tool windows中开启。通过小+号打开Run Configuration Type选择Springboot即可<br>
<img src="https://dxone1.github.io//post-images/1635931972133.png" alt="" loading="lazy"></p>
<h2 id="2-openfeign进行远程调用">2 OpenFeign进行远程调用</h2>
<p>第一步仍然是引入依赖，不同的是这个项目使用Spring Initializer生成时使用了feign场景。</p>
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt; &lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ol start="2">
<li>在nall-coupon中添加一个调用controller方法</li>
</ol>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;coupon/coupon&quot;)
public class CouponController {
    @Autowired
    private CouponService couponService;

    @RequestMapping(&quot;/member/list&quot;)
    public R membercoupons() {
        CouponEntity couponEntity = new CouponEntity();
        couponEntity.setCouponName(&quot;满100减10&quot;);
        return R.ok().put(&quot;coupons&quot;, Arrays.asList(couponEntity));
    }
    ......
}
</code></pre>
<ol start="3">
<li>写一个用于远程调用的接口：FeignClient，标注被调用的完整controller和服务名称</li>
</ol>
<pre><code class="language-java">// com.dong.mall.member.feign.CouponFeignService
package com.dong.mall.coupon.feign;

import com.dong.common.utils.R;
import org.springframework.cloud.openfeign.FeignClient;
import org.springframework.web.bind.annotation.RequestMapping;

@FeignClient(&quot;mall-coupon&quot;)
public interface CouponFeignService {
    @RequestMapping(&quot;/coupon/coupon/member/list&quot;)
    public R membercoupons();
}
</code></pre>
<ol start="4">
<li>在调用发起方主启动类使用@EnableFeignClients(basePackages = &quot;com.dong.mall.member.feign&quot;)开启远程调用功能</li>
<li>在调用发起方mall-member中写一个调用测试方法</li>
</ol>
<pre><code class="language-java">@RestController
@RequestMapping(&quot;member/member&quot;)
public class MemberController {
    @Autowired
    private MemberService memberService;
    // 远程调用接口
    @Autowired
    CouponFeignService couponFeignService;

    @RequestMapping(&quot;/coupons&quot;)
    public R test() {
        MemberEntity memberEntity = new MemberEntity();
        memberEntity.setNickname(&quot;张三&quot;);
        R membercoupons = couponFeignService.membercoupons();
        return R.ok().put(&quot;member&quot;, memberEntity).put(&quot;coupons&quot;, membercoupons.get(&quot;coupons&quot;));
    }
    ......
}
</code></pre>
<p>测试<br>
<img src="https://dxone1.github.io//post-images/1635937631422.png" alt="" loading="lazy"></p>
<h2 id="3-使用nacos做配置中心">3 使用Nacos做配置中心</h2>
<ol>
<li>在mall-common中引入配置中心依赖</li>
</ol>
<pre><code class="language-xml">&lt;dependency&gt;
            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;
            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ol start="2">
<li>在需要管理配置的项目中编写bootstrap.properties文件，该文件会早于application.yml/application.properties生效</li>
</ol>
<pre><code class="language-txt">spring.application.name=mall-coupon
# 配置中心的地址
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
</code></pre>
<ol start="3">
<li>在control上添加一个注解 @RefreshScope</li>
<li>尝试使用nacos的配置中心功能。已经开启了持久化功能。配置文件名为mall-coupon.properties</li>
<li>测试</li>
</ol>
<pre><code class="language-java">@RefreshScope
@RestController
@RequestMapping(&quot;coupon/coupon&quot;)
public class CouponController {
    @Autowired
    private CouponService couponService;

    // 从配置中获取
    @Value(&quot;${coupon.user.name}&quot;)
    private String name;
    @Value(&quot;${coupon.user.age}&quot;)
    private String age;

    @RequestMapping(&quot;/test&quot;)
    public R test() {
        return R.ok().put(&quot;name&quot;, name).put(&quot;age&quot;, age);
    }
    ......
}
</code></pre>
<p><strong>会优先使用配置中心的配置</strong></p>
<h3 id="高级主题分组">高级主题：分组</h3>
<ol>
<li>默认命名空间为public，用于环境配置隔离<br>
开发、测试、生产...<br>
<img src="https://dxone1.github.io//post-images/1635939434661.png" alt="" loading="lazy"><br>
如何切换namespce?</li>
</ol>
<pre><code class="language-txt">spring.cloud.nacos.config.namespace=cb2b23c4-62ab-41e0-a131-70ae4b2c2772
</code></pre>
<p>上面的是对应的命名空间的ID，在nacos图形界面里显示<br>
也可以每个微服务之间互相隔离，建立不同的命名空间<br>
2. 配置集：配置集的集合<br>
3. 配置集id：类似于配置文件名， Data id<br>
4. 配置分组：默认属于DEFAULT_GROUP<br>
<img src="https://dxone1.github.io//post-images/1635939995992.png" alt="" loading="lazy"><br>
使用切换分组</p>
<pre><code class="language-txt">spring.cloud.nacos.config.group=1111
</code></pre>
<p><strong>本项目的约定</strong><br>
每个微服务设置一个命名空间，使用配置分组区分环境 dev, test, prod</p>
<h3 id="高级主题加载多配置集">高级主题：加载多配置集</h3>
<p>例子：</p>
<ol>
<li>将mall-coupons项目的配置拆分并托管给nacos</li>
</ol>
<pre><code class="language-yaml"># datasource.yaml
spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.180.3:3306/mall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver
</code></pre>
<p><img src="https://dxone1.github.io//post-images/1635940659201.png" alt="" loading="lazy"><br>
2. 在bootstrap.properties中配置多配置集</p>
<pre><code class="language-txt">spring.application.name=mall-coupon
# 配置中心的地址
spring.cloud.nacos.config.server-addr=127.0.0.1:8848
spring.cloud.nacos.config.namespace=527f3748-b8fe-44bb-8e4f-bf22371a0adc
spring.cloud.nacos.config.group=dev

# 配置集
# id
spring.cloud.nacos.config.ext-config[0].data-id=datasource.yaml
# 分组
spring.cloud.nacos.config.ext-config[0].group=dev
# 是否动态刷新
spring.cloud.nacos.config.ext-config[0].refresh=true

spring.cloud.nacos.config.ext-config[1].data-id=mybatis.yaml
spring.cloud.nacos.config.ext-config[1].group=dev
spring.cloud.nacos.config.ext-config[1].refresh=true

spring.cloud.nacos.config.ext-config[2].data-id=other.yaml
spring.cloud.nacos.config.ext-config[2].group=dev
spring.cloud.nacos.config.ext-config[2].refresh=true
</code></pre>
<h2 id="4-gateway服务网关">4 Gateway服务网关</h2>
<p>作用：鉴权、限流、日志<br>
<img src="https://dxone1.github.io//post-images/1635943097682.png" alt="" loading="lazy"><br>
关键词：路由、断言、过滤器<br>
<img src="https://dxone1.github.io//post-images/1635943846901.png" alt="" loading="lazy"><br>
创建一个项目，作为整体的api网关mall-gateway</p>
<ol>
<li>创建项目，生成时选择Gateway</li>
<li>修改pom文件，统一版本并引入mall-common</li>
<li>开启服务发现 @EnableDiscoveryClient</li>
<li>写application.properties，配置nacos的相关地址，服务发现和注册中心。网关设置为88端口</li>
</ol>
<pre><code class="language-yaml"># bootstrap.yml
spring:
  application:
    name: mall-gateway
  cloud:
    nacos:
      config:
        server-addr: 127.0.0.1:8848
        namespace: 99df8f0b-1740-4545-b75e-108da1f752ff
        group: dev
</code></pre>
<pre><code class="language-txt"># application.properties
spring.cloud.nacos.discovery.server-addr=127.0.0.1:8848
spring.application.name=mall-gateway
server.port=88
</code></pre>
<p>配置gateway的规则</p>
<pre><code class="language-yaml">spring:
  cloud:
    gateway:
      routes:
        - id: baidu_route
          uri: https://www.baidu.com
          # 断言含有百度
          predicates:
            - Query=url,baidu
        - id: qq_route
          uri: https://www.qq.com
          predicates:
            - Query=url,qq
</code></pre>
<p>如果访问https://localhost:88/hello?url=baidu 会跳到www.baidu.com/hello</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电商项目 day1：使用开源项目快速搭建]]></title>
        <id>https://dxone1.github.io/post/dian-shang-xiang-mu-day1/</id>
        <link href="https://dxone1.github.io/post/dian-shang-xiang-mu-day1/">
        </link>
        <updated>2021-11-02T02:35:33.000Z</updated>
        <content type="html"><![CDATA[<p>为了解决开发的繁重，使用gitee开源的人人开源脚手架工程快速搭建前后分离的项目工程。<br>
renren-fast: https://gitee.com/renrenio/renren-fast<br>
renren-fast-vue：https://gitee.com/renrenio/renren-fast-vue.git<br>
将renren-fast工程clone到本地导入项目，在父pom文件中定义这个模块即可。</p>
<h2 id="1-基于开源脚手架项目快速搭建">1 基于开源脚手架项目快速搭建</h2>
<h3 id="1-后台框架搭建">1 后台框架搭建</h3>
<p>将后端程序加入到项目文档中成为一个子模块。打开其中的建表命令，通过sqlyog连接centos中docker部署的数据库。执行建表指令，搭建起后台管理的后端框架。修改springboot的dev环境配置文件，将项目连接到数据库。项目启动成功如下图<br>
<img src="https://dxone1.github.io//post-images/1635837233452.png" alt="" loading="lazy"><br>
在浏览器中输入http://localhost:8080/renren-fast/ 即可进入raw后端项目，返回如下图（浏览器安装了json解析工具）<br>
<img src="https://dxone1.github.io//post-images/1635837314851.png" alt="" loading="lazy"></p>
<h3 id="2-前端框架搭建">2 前端框架搭建</h3>
<p>接下来进行前端工程。因为之前前端没有深入学习过，这里一边做一边学习。</p>
<ol>
<li>下载node.js环境并安装：版本10.16.3</li>
<li>配置npm使用淘宝镜像 npm config set registry http://registry.npm.taobao.org/</li>
<li>在vs code中打开renren-fast-vue项目，在控制台终端使用npm install命令下载项目需要的各种依赖：NPM 是随同 NodeJS 一起安装的包管理工具</li>
<li>在控制台输入 npm run dev即可开启前端项目。前端地址localhost:8001会将数据打到后端8080地址<br>
前端启动画面<br>
<img src="https://dxone1.github.io//post-images/1635838697500.png" alt="" loading="lazy"><br>
默认登陆账号为 admin admin</li>
</ol>
<h3 id="3-代码生成器">3 代码生成器</h3>
<p>gitee项目 https://gitee.com/renrenio/renren-generator.git<br>
将代码生成器放入后端项目目录中，添加为模块。将配置修改为对应的数据库和项目包。启动在80端口生成代码文档。<br>
将代码文档替换对应的微服务文档即可。注意需要引入许多新的公共依赖。在这里提取出一个公共项目mall-common。所有其他的微服务都依赖于这个模块，在其中的com.dong.common.utils等包中加入需要的类，在公共pom中添加需要的依赖。<br>
因为本项目使用了Mybatis-plus帮助快速开发，所以要按以下步骤进行：</p>
<ol>
<li>在公共项目mall-common中导入mybatis-plus的依赖</li>
<li>在yml文件中配置数据源、mybatis-plus信息等。注意和数据库版本匹配：5.7.36。使用8.0.26版本的数据库驱动即可</li>
<li>配置包扫描，在主启动类上用@Mapper注解指示Mapper接口路径</li>
</ol>
<pre><code class="language-java">@MapperScan(&quot;com.dong.mall.product.dao&quot;)
@SpringBootApplication
public class MallProductApplication {

    public static void main(String[] args) {
        SpringApplication.run(MallProductApplication.class, args);
    }

}
</code></pre>
<pre><code class="language-yaml"># application.yml配置的数据源和mybatis-plus
spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.180.3:3306/mall_pms
    driver-class-name: com.mysql.cj.jdbc.Driver

mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  # 配置自增主键 
  global-config:
    db-config:
      id-type: auto
</code></pre>
<p>注意本项目以后使用的是spring security保证安全，所以不需要renren开源项目中的部分文件，按需添加。最终的mall-common目录如下<br>
<img src="https://dxone1.github.io//post-images/1635921702816.png" alt="" loading="lazy"><br>
在test中使用单元测试，注意匹配jdk版本。同时注意springboot和springcloud版本的匹配。本项目是</p>
<pre><code class="language-yaml">springboot: 2.1.8.RELEASE
springcloud: Greenwich.SR3
</code></pre>
<p>接下来，按照上述步骤逆向生成除mall-product之外其他所有的微服务的代码，并调试。</p>
<h3 id="代码生成器的配置以mall-coupon为例">代码生成器的配置：以mall-coupon为例</h3>
<ol>
<li>首先在generator.properties中设置项目层级目录的相关信息</li>
</ol>
<pre><code class="language-properties">#\u4EE3\u7801\u751F\u6210\u5668\uFF0C\u914D\u7F6E\u4FE1\u606F

mainPath=com.dong
#\u5305\u540D
package=com.dong.mall
moduleName=coupon
#\u4F5C\u8005
author=dong
#Email
email=dongjiyu111@126.com
#\u8868\u524D\u7F00(\u7C7B\u540D\u4E0D\u4F1A\u5305\u542B\u8868\u524D\u7F00)
tablePrefix=sms_

#\u7C7B\u578B\u8F6C\u6362\uFF0C\u914D\u7F6E\u4FE1\u606F
tinyint=Integer
smallint=Integer
mediumint=Integer
int=Integer
integer=Integer
bigint=Long
float=Float
double=Double
decimal=BigDecimal
bit=Boolean

char=String
varchar=String
tinytext=String
text=String
mediumtext=String
longtext=String


date=Date
datetime=Date
timestamp=Date

NUMBER=Integer
INT=Integer
INTEGER=Integer
BINARY_INTEGER=Integer
LONG=String
FLOAT=Float
BINARY_FLOAT=Float
DOUBLE=Double
BINARY_DOUBLE=Double
DECIMAL=BigDecimal
CHAR=String
VARCHAR=String
VARCHAR2=String
NVARCHAR=String
NVARCHAR2=String
CLOB=String
BLOB=String
DATE=Date
DATETIME=Date
TIMESTAMP=Date
TIMESTAMP(6)=Date

int8=Long
int4=Integer
int2=Integer
numeric=BigDecimal

nvarchar=String
</code></pre>
<ol start="2">
<li>在application.yml中配置数据源信息，coupon逆向生成的表存在于mall_sms数据库中</li>
</ol>
<pre><code class="language-yaml">server:
  port: 80

# mysql
spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    #MySQL配置
    driverClassName: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://192.168.180.3:3306/mall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai
    username: root
    password: root
    #oracle配置
    #    driverClassName: oracle.jdbc.OracleDriver
    #    url: jdbc:oracle:thin:@47.100.206.162:1521:xe
    #    username: renren
    #    password: 123456
    #SQLServer配置
    #    driverClassName: com.microsoft.sqlserver.jdbc.SQLServerDriver
    #    url: jdbc:sqlserver://192.168.10.10:1433;DatabaseName=renren_fast
    #    username: sa
    #    password: 123456
    #PostgreSQL配置
  #    driverClassName: org.postgresql.Driver
  #    url: jdbc:postgresql://192.168.10.10:5432/renren_fast
  #    username: postgres
  #    password: 123456



  jackson:
    time-zone: GMT+8
    date-format: yyyy-MM-dd HH:mm:ss
  resources:
    static-locations: classpath:/static/,classpath:/views/

#mongodb:
#  host: localhost
#  port: 27017
#  auth: false #是否使用密码验证
#  username: tincery
#  password: renren
#  source: 123456
#  database: test

mybatis-plus:
  mapperLocations: classpath:mapper/**/*.xml


pagehelper:
  reasonable: true
  supportMethodsArguments: true
  params: count=countSql


#指定数据库，可选值有【mysql、oracle、sqlserver、postgresql、mongodb】
renren:
  database: mysql
</code></pre>
<ol start="3">
<li>引入公共依赖</li>
<li>写application.yml文件</li>
</ol>
<pre><code class="language-yaml">spring:
  datasource:
    username: root
    password: root
    url: jdbc:mysql://192.168.180.3:3306/mall_sms?useUnicode=true&amp;characterEncoding=UTF-8&amp;useSSL=false&amp;serverTimezone=Asia/Shanghai
    driver-class-name: com.mysql.cj.jdbc.Driver

mybatis-plus:
  mapper-locations: classpath:/mapper/**/*.xml
  # 配置自增主键
  global-config:
    db-config:
      id-type: auto
</code></pre>
<ol start="5">
<li>配置包扫描</li>
</ol>
<pre><code class="language-java">@MapperScan(&quot;com.dong.mall.product.dao&quot;)
@SpringBootApplication
public class MallCouponApplication {

    public static void main(String[] args) {
        SpringApplication.run(MallCouponApplication.class, args);
    }

}
</code></pre>
<ol start="6">
<li>test中junit重新导入包</li>
<li>测试完成<br>
<img src="https://dxone1.github.io//post-images/1635925644636.png" alt="" loading="lazy"></li>
</ol>
<h3 id="项目的端口分配">项目的端口分配</h3>
<pre><code class="language-yaml">mall-coupon: 7000
mall-member: 8000
mall-order: 9000
mall-product: 10000
mall-ware: 11000
</code></pre>
<p>重要的细心的耐心，按照步骤一步步即可完成。通过这个脚手架工程和代码生成器可以快速完成基本的crud搭建，快速进入下一阶段的业务编写和云配置部分。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[电商项目 day0：环境配置]]></title>
        <id>https://dxone1.github.io/post/dian-shang-xiang-mu-day0/</id>
        <link href="https://dxone1.github.io/post/dian-shang-xiang-mu-day0/">
        </link>
        <updated>2021-11-01T07:01:39.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-项目的总体架构">1 项目的总体架构</h2>
<p><img src="https://dxone1.github.io//post-images/1635752087534.jpg" alt="" loading="lazy"><br>
总体上会使用SpringcloudAlibaba和SpringCloud体系的其他组件完成整个微服务体系。</p>
<h2 id="2-linux环境搭建">2 Linux环境搭建</h2>
<h3 id="1-配置静态ip">1 配置静态IP</h3>
<p>这里提一下Vmware + Centos7的静态ip配置</p>
<ol>
<li>首先在Vmware上设置NAT桥接模式，禁用本地DHCP服务。设置一个子网IP，并将网关设置为统一网段中的地址</li>
<li>设置适配器VMware Network Adapter VMnet8的IPV4属性。将IP地址设置在同一个网段中，网关与上面的保持一致。设置首选DNS服务器为114.114.114.114，备用为223.5.5.5阿里云解析</li>
<li>修改配置文件<code>/etc/sysconfig/network-scripts/ifcfg-ens33</code></li>
</ol>
<pre><code class="language-vim">TYPE=&quot;Ethernet&quot;
PROXY_METHOD=&quot;none&quot;
BROWSER_ONLY=&quot;no&quot;
BOOTPROTO=&quot;static&quot;
DEFROUTE=&quot;yes&quot;
IPV4_FAILURE_FATAL=&quot;no&quot;
IPV6INIT=&quot;yes&quot;
IPV6_AUTOCONF=&quot;yes&quot;
IPV6_DEFROUTE=&quot;yes&quot;
IPV6_FAILURE_FATAL=&quot;no&quot;
IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;
NAME=&quot;ens33&quot;
UUID=&quot;012d6c4a-d6ac-45e3-ac99-80797072e5f7&quot;
DEVICE=&quot;ens33&quot;
ONBOOT=&quot;yes&quot;
IPADDR=192.168.180.3  #IP地址
GATEWAY=192.168.180.2  #网关
NETMASK=255.255.255.0  
DNS1=&quot;114.114.114.114&quot;
DNS2=&quot;223.5.5.5&quot;
</code></pre>
<h3 id="2-docker环境">2 Docker环境</h3>
<p>之前已经搭建完成Linux + Docker环境，这里下载开发所需的msyql和redis数据库镜像。首先使用<code>dcoker rmi -f $(docker images -qa)</code>删除所有本地已有的镜像，防止冲突。</p>
<h4 id="1-mysql">1 Mysql</h4>
<p>安装版本版本如下</p>
<pre><code class="language-txt">mysql:5.7
</code></pre>
<p>启动docker的mysql环境使用以下命令，这都是docker基础不再赘述。大体意思是后台启动并映射端口为3306 -&gt; 3306。同时添加数据卷用于共享文件，并设定root的密码</p>
<pre><code class="language-dockerfile">docker run -p 3306:3306 --name mysql 
-v /mydata/mysql/log:/var/log/mysql 
-v /mydata/mysql/data:/var/lib/mysql 
-v /mydata/mysql/conf:/etc/mysql 
-e MYSQL_ROOT_PASSWORD=root -d mysql:5.7
</code></pre>
<p>可以通过访问虚拟机的Linux端口映射访问到Container的Mysql服务<br>
<img src="https://dxone1.github.io//post-images/1635755403050.png" alt="" loading="lazy"><br>
验证：在container中建立一个数据库，并在其中测试建一张表，看外部访问是否成功。<br>
<img src="https://dxone1.github.io//post-images/1635756022893.png" alt="" loading="lazy"><br>
<img src="https://dxone1.github.io//post-images/1635756028396.png" alt="" loading="lazy"></p>
<p>接下来修改Mysql的配置文件</p>
<pre><code class="language-conf">[client]
default-character-set=utf8

[mysql]
default-character-set=utf8

[mysqld]
init_connect='SET collation_connection = utf8_unicode_ci'
init_connect='SET NAMES utf8'
character-set-server=utf8
collation-server=utf8_unicode_ci
skip-character-set-client-handshake
skip-name-resolve
</code></pre>
<h4 id="2-redis">2 Redis</h4>
<p>直接pull最新版本的redis，先创建实例</p>
<pre><code class="language-txt">mkdir -p /mydata/redis/conf
touch /mydata/redis/conf/redis.conf
</code></pre>
<p>启动命令如下：</p>
<pre><code class="language-dockerfile">docker run -p 6379:6379 --name redis \
-v /mydata/redis/data:/data \
-v /mydata/redis/conf/redis.conf:/etc/redis/redis.conf \
-d redis redis-server /etc/redis/redis.conf
</code></pre>
<p>##测试Redis##<br>
<img src="https://dxone1.github.io//post-images/1635757265978.png" alt="" loading="lazy"></p>
<p>注意：新版本的redis会默认持久化，旧版本的则需要修改配置文件<code>/mydata/redis/conf/redis.conf</code></p>
<pre><code class="language-txt">appendonly yes
</code></pre>
<p>启用Redis AOF持久化模式</p>
<h2 id="2-开发环境">2 开发环境</h2>
<p>清单</p>
<pre><code class="language-txt">jdk1.8.0_291
Apache Maven 3.5.2
vsode 大量前端插件
</code></pre>
<p>使用gitee进行项目版本控制。注意现在网络流传的ssh公钥设置往往存在问题，通过查找官网成功配置：https://gitee.com/help/articles/4181#article-header0<br>
<img src="https://dxone1.github.io//post-images/1635765496610.png" alt="" loading="lazy"><br>
在gitee上创建一个仓库：https://gitee.com/dxone/mall.git<br>
在idea中使用git版本控制新建项目，并组织项目结构</p>
<ol>
<li>使用Spring Initializer搭建项目，使用Springboot 2.1.8RELEASE版本，搭建如下项目Module</li>
</ol>
<pre><code class="language-txt">mall-coupon
mall-member
mall-order
mall-product
mall-ware
</code></pre>
<ol start="2">
<li>在项目最外层以pom形式打包，聚合整个mvn工程</li>
</ol>
<pre><code class="language-xml">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
         xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt;
    &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;
    &lt;groupId&gt;com.dong.mall&lt;/groupId&gt;
    &lt;artifactId&gt;mall&lt;/artifactId&gt;
    &lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;
    &lt;name&gt;mall&lt;/name&gt;
    &lt;description&gt;聚合服务&lt;/description&gt;
    &lt;packaging&gt;pom&lt;/packaging&gt;

    &lt;modules&gt;
        &lt;module&gt;mall-coupon&lt;/module&gt;
        &lt;module&gt;mall-member&lt;/module&gt;
        &lt;module&gt;mall-order&lt;/module&gt;
        &lt;module&gt;mall-product&lt;/module&gt;
        &lt;module&gt;mall-ware&lt;/module&gt;
    &lt;/modules&gt;
&lt;/project&gt;
</code></pre>
<p><img src="https://dxone1.github.io//post-images/1635771275051.png" alt="" loading="lazy"><br>
commit并push到gitee项目仓库<br>
<img src="https://dxone1.github.io//post-images/1635771426712.png" alt="" loading="lazy"></p>
<h2 id="3-数据库设计">3 数据库设计</h2>
<p>根据模块分库分表，sql语句已提供。建库建表后结果如图<br>
<img src="https://dxone1.github.io//post-images/1635773709958.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://dxone1.github.io/post/hello-gridea/</id>
        <link href="https://dxone1.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>